流程控制语句
  分支语句：根据不同的条件执行对应的代码
    if分支【重点】
        单分支：if(条件){}
        双分支：if(条件){}else{}
        多分枝：if(条件1){}else if(条件2){}else if(条件3){}...else{}
        执行流程：哪个if或者else if中的条件满足，就执行哪个里面的代码，都不符合就执行else中的代码。
    switch分支
        switch(表达式){
          case 值1:
            代码;
            break;
          case 值2:
            代码2;
            break;
          ...
          default:
            代码n;
        }
        执行流程：计算表达式的结果，和哪个case后面的值相等就执行哪个case中的语句，遇到break就结束switch分支。
        注意：如果没有写break关键字，则会出现case穿透现象。case穿透现象：直接进入下一个case中的代码执行，不比较表达式的结果和case后面的值。
    区别：switch适合做等值判断，if适合做区间判断。

  循环语句：控制一段代码重复执行多次
    while循环结构：【重点】
        语法：
          初始化语句①
          while(循环条件②){
            循环体语句(要重复执行的代码)③
            迭代语句④
          }
        执行流程：①②③④---》②③④---》②③④---》...②③④---》②结果时false，循环结束
    for循环结构：【重点】
        语法：
          for(初始化语句①;循环条件②;迭代语句④){
            循环体语句(要重复执行的代码)③
          }
        执行流程：①②③④---》②③④---》②③④---》...②③④---》②结果时false，循环结束
    break关键字和continue关键字的区别？
      break关键字：写在循环或者switch分支语句中，表示结束循环或者switch分支。
      continue关键字：只能写在循环中，表示跳过本次循环继续下一次循环。
函数【重点】
  什么是函数，有什么作用？
    也叫方法，将一段代码封装到一起形成一个代码块(功能)。好处：可以重复使用多次。
  方法的定义
    具名函数：由function关键字和函数名组成。
      function 函数名(参数1,参数2,...){
        逻辑代码;
        return 结果
      }
    匿名函数：没有名字的函数，但是需要将函数赋值给一个变量保存，变量名就是函数名。
      let 变量名 = function (参数1,参数2,...){
                    逻辑代码;
                    return 结果
                  }
    箭头函数：由 (参数1,参数2,...)=>{函数体} 三部分组成，属于匿名函数的一种，需要将箭头函数赋值给一个变量，变量名就是函数名。
      let 变量名 = (参数1,参数2,...)=>{
                    逻辑代码;
                    return 结果
                  }
      简写格式1：当参数列表有且仅有一个形参，小括号()可以省略不写。
      简写格式2：方法体有且仅有一句代码,大括号{}、return(如果有)、分号(;) 可以一起省略。。

  方法的调用
    let 结果变量 = 函数名(参数值1,参数值2,...)   //适用于具名函数
    let 结果变量 = 变量名(参数值1,参数值2,...)   //适用于匿名函数或者箭头函数

数组【重点】
  概念和作用：数组是一种数据类型，属于引用类型。好处：可以让一个变量保存多个数据。
  定义：
    let 数组名 = [值1,值2,...] 
    注意：
        1、数组中的数据也叫元素。
        2、数组是按添加顺序保存数据的，所以每个数据/元素都有自己的编号，这个编号也叫做索引/下标，索引从0开始。
        3、数组可以存储任意类型的数据，例如：let arr=[10,20,'张伟',true]，但是一般是存同类型数据。
  访问：
    赋值：数组名[索引]=值;
    取值：数组名[索引];
    长度：数组名.length;
  遍历：
    for(let i=0;i<数组名.length;i++){  //i表示索引，最大值 = 数组名.length-1
        数组名[i]
    }
    快捷键：for+回车