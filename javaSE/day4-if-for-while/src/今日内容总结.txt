分支结构
    作用：根据条件执行对应的代码。
    if分支【重点】
        语法：
            单分支：if(条件){...}
            双分支：if(条件){...}else{...}
            多分支：if(条件1){...}else if(条件2){...}else if(条件3){...}...else{...}
    switch分支
        语法：
            switch(表达式){  //这个表达式可以是一个变量，也可以是一个做运算的式子(一定要有结果)
                case 值1:
                    语句1;
                    break;
                case 值2:
                    语句2;
                    break;
                ...
                default:
                    语句n;
            }
        case穿透：当case中没有写break时，执行完当前case中的语句后直接执行下一个case中的语句，直到遇到break结束。
    什么时候使用if分支，什么时候使用switch分支？
        if分支适合做区间范围判断，switch适合做等值判断。

循环结构
    作用：重复(循环)执行某段代码。
    for循环：【重点】
        语法：
            for(初始化语句①;循环条件②;迭代语句④){
                循环体语句(要重复执行的代码)③
            }
            解释：
                初始化语句：定义循环变量。例如：int i = 0;
                循环条件：判断循环变量的值，满足条件就循环，不满足条件就结束循环。 例如：i<3;
                迭代语句：修改循环变量的值。例如：i++
                循环体语句：重复执行的代码
        快捷键：
            正向循环（i的值从小到大）：循环次数.fori+回车
            倒着循环（i的值从大到小）：循环次数.forr+回车
        流程总结：①②③④--->②③④--->②③④--->...--->②③④--->②的结果是false结束循环
    while循环：【重点】
        语法：
            初始化语句①;
            while(循环条件②){
                循环体语句(要重复执行的代码)③;
                迭代语句④;
            }
        流程总结：①②③④--->②③④--->②③④--->...--->②③④--->②的结果是false结束循环
    do...while循环：
        语法：
            初始化语句①;
            do{
                循环体语句(要重复执行的代码)③;
                迭代语句④;
            }while(循环条件②)
        流程总结：①③④②--->③④②--->③④②--->...--->③④②的结果是false结束循环
        特点：选执行循环体语句后判断，循环体语句至少在执行一次。
    三种循环如何选？
        很明确循环次数选for循环，不清楚循环次数选while。如果要求至少要执行一次循环选do...while。

    break关键字和continue关键字的区别？
        break关键字：写在循环或者switch语句中，用于结束所在循环或者switch分支。
        continue关键字：只能写在循环中，用于跳过本次循环，继续下一个循环。

Random随机数
    作用：使用Java提供的Random类生成一个随机数。
    使用步骤：
        第一步：导包，告诉程序去jdk哪个包中找Random（可以自动导入）
        第二步：创建Random随机数对象
            Random r = new Random();  //写Random的时候按回车键自动导包
        第三步：调用nextInt(n)功能生成一个随机整数
            int number = r.nextInt(n);  //生成[0~n)之间的随机整数，包括0不包括n。
            int number = r.nextInt(m,n);  //生成[m~n)之间的随机整数，包括m不包括n。